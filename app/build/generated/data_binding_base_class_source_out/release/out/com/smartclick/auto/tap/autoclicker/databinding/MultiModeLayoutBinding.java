// Generated by view binder compiler. Do not edit!
package com.smartclick.auto.tap.autoclicker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.smartclick.auto.tap.autoclicker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MultiModeLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView close;

  @NonNull
  public final ImageView minus;

  @NonNull
  public final ImageView move;

  @NonNull
  public final ImageView play;

  @NonNull
  public final ImageView pluse;

  @NonNull
  public final ImageView save;

  @NonNull
  public final ImageView setting;

  @NonNull
  public final ImageView swipe;

  private MultiModeLayoutBinding(@NonNull RelativeLayout rootView, @NonNull ImageView close,
      @NonNull ImageView minus, @NonNull ImageView move, @NonNull ImageView play,
      @NonNull ImageView pluse, @NonNull ImageView save, @NonNull ImageView setting,
      @NonNull ImageView swipe) {
    this.rootView = rootView;
    this.close = close;
    this.minus = minus;
    this.move = move;
    this.play = play;
    this.pluse = pluse;
    this.save = save;
    this.setting = setting;
    this.swipe = swipe;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MultiModeLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MultiModeLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.multi_mode_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MultiModeLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.close;
      ImageView close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.minus;
      ImageView minus = ViewBindings.findChildViewById(rootView, id);
      if (minus == null) {
        break missingId;
      }

      id = R.id.move;
      ImageView move = ViewBindings.findChildViewById(rootView, id);
      if (move == null) {
        break missingId;
      }

      id = R.id.play;
      ImageView play = ViewBindings.findChildViewById(rootView, id);
      if (play == null) {
        break missingId;
      }

      id = R.id.pluse;
      ImageView pluse = ViewBindings.findChildViewById(rootView, id);
      if (pluse == null) {
        break missingId;
      }

      id = R.id.save;
      ImageView save = ViewBindings.findChildViewById(rootView, id);
      if (save == null) {
        break missingId;
      }

      id = R.id.setting;
      ImageView setting = ViewBindings.findChildViewById(rootView, id);
      if (setting == null) {
        break missingId;
      }

      id = R.id.swipe;
      ImageView swipe = ViewBindings.findChildViewById(rootView, id);
      if (swipe == null) {
        break missingId;
      }

      return new MultiModeLayoutBinding((RelativeLayout) rootView, close, minus, move, play, pluse,
          save, setting, swipe);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
