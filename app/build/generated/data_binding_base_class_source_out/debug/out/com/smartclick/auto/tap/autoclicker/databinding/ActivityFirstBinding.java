// Generated by view binder compiler. Do not edit!
package com.smartclick.auto.tap.autoclicker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.smartclick.auto.tap.autoclicker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFirstBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout bPolicy;

  @NonNull
  public final LinearLayout bRate;

  @NonNull
  public final LinearLayout bShare;

  @NonNull
  public final ImageView bStart;

  @NonNull
  public final LinearLayout nativeLay;

  private ActivityFirstBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout bPolicy,
      @NonNull LinearLayout bRate, @NonNull LinearLayout bShare, @NonNull ImageView bStart,
      @NonNull LinearLayout nativeLay) {
    this.rootView = rootView;
    this.bPolicy = bPolicy;
    this.bRate = bRate;
    this.bShare = bShare;
    this.bStart = bStart;
    this.nativeLay = nativeLay;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFirstBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFirstBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_first, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFirstBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bPolicy;
      LinearLayout bPolicy = ViewBindings.findChildViewById(rootView, id);
      if (bPolicy == null) {
        break missingId;
      }

      id = R.id.bRate;
      LinearLayout bRate = ViewBindings.findChildViewById(rootView, id);
      if (bRate == null) {
        break missingId;
      }

      id = R.id.bShare;
      LinearLayout bShare = ViewBindings.findChildViewById(rootView, id);
      if (bShare == null) {
        break missingId;
      }

      id = R.id.bStart;
      ImageView bStart = ViewBindings.findChildViewById(rootView, id);
      if (bStart == null) {
        break missingId;
      }

      id = R.id.nativeLay;
      LinearLayout nativeLay = ViewBindings.findChildViewById(rootView, id);
      if (nativeLay == null) {
        break missingId;
      }

      return new ActivityFirstBinding((RelativeLayout) rootView, bPolicy, bRate, bShare, bStart,
          nativeLay);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
