// Generated by view binder compiler. Do not edit!
package com.smartclick.auto.tap.autoclicker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.smartclick.auto.tap.autoclicker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMultiModeSettingBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView back;

  @NonNull
  public final LinearLayout detailsOne;

  @NonNull
  public final LinearLayout detailsTwo;

  @NonNull
  public final ImageView down;

  @NonNull
  public final RelativeLayout header;

  @NonNull
  public final LinearLayout intervalBgLl;

  @NonNull
  public final EditText intervalEt;

  @NonNull
  public final TextView intervalType;

  @NonNull
  public final TextView mTv;

  @NonNull
  public final TextView msTv;

  @NonNull
  public final RelativeLayout popupRl;

  @NonNull
  public final TextView reset;

  @NonNull
  public final TextView sTv;

  @NonNull
  public final TextView save;

  @NonNull
  public final LinearLayout swipeBgLl;

  @NonNull
  public final EditText swipeEt;

  private ActivityMultiModeSettingBinding(@NonNull RelativeLayout rootView, @NonNull ImageView back,
      @NonNull LinearLayout detailsOne, @NonNull LinearLayout detailsTwo, @NonNull ImageView down,
      @NonNull RelativeLayout header, @NonNull LinearLayout intervalBgLl,
      @NonNull EditText intervalEt, @NonNull TextView intervalType, @NonNull TextView mTv,
      @NonNull TextView msTv, @NonNull RelativeLayout popupRl, @NonNull TextView reset,
      @NonNull TextView sTv, @NonNull TextView save, @NonNull LinearLayout swipeBgLl,
      @NonNull EditText swipeEt) {
    this.rootView = rootView;
    this.back = back;
    this.detailsOne = detailsOne;
    this.detailsTwo = detailsTwo;
    this.down = down;
    this.header = header;
    this.intervalBgLl = intervalBgLl;
    this.intervalEt = intervalEt;
    this.intervalType = intervalType;
    this.mTv = mTv;
    this.msTv = msTv;
    this.popupRl = popupRl;
    this.reset = reset;
    this.sTv = sTv;
    this.save = save;
    this.swipeBgLl = swipeBgLl;
    this.swipeEt = swipeEt;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMultiModeSettingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMultiModeSettingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_multi_mode_setting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMultiModeSettingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.detailsOne;
      LinearLayout detailsOne = ViewBindings.findChildViewById(rootView, id);
      if (detailsOne == null) {
        break missingId;
      }

      id = R.id.detailsTwo;
      LinearLayout detailsTwo = ViewBindings.findChildViewById(rootView, id);
      if (detailsTwo == null) {
        break missingId;
      }

      id = R.id.down;
      ImageView down = ViewBindings.findChildViewById(rootView, id);
      if (down == null) {
        break missingId;
      }

      id = R.id.header;
      RelativeLayout header = ViewBindings.findChildViewById(rootView, id);
      if (header == null) {
        break missingId;
      }

      id = R.id.intervalBgLl;
      LinearLayout intervalBgLl = ViewBindings.findChildViewById(rootView, id);
      if (intervalBgLl == null) {
        break missingId;
      }

      id = R.id.intervalEt;
      EditText intervalEt = ViewBindings.findChildViewById(rootView, id);
      if (intervalEt == null) {
        break missingId;
      }

      id = R.id.intervalType;
      TextView intervalType = ViewBindings.findChildViewById(rootView, id);
      if (intervalType == null) {
        break missingId;
      }

      id = R.id.mTv;
      TextView mTv = ViewBindings.findChildViewById(rootView, id);
      if (mTv == null) {
        break missingId;
      }

      id = R.id.msTv;
      TextView msTv = ViewBindings.findChildViewById(rootView, id);
      if (msTv == null) {
        break missingId;
      }

      id = R.id.popupRl;
      RelativeLayout popupRl = ViewBindings.findChildViewById(rootView, id);
      if (popupRl == null) {
        break missingId;
      }

      id = R.id.reset;
      TextView reset = ViewBindings.findChildViewById(rootView, id);
      if (reset == null) {
        break missingId;
      }

      id = R.id.sTv;
      TextView sTv = ViewBindings.findChildViewById(rootView, id);
      if (sTv == null) {
        break missingId;
      }

      id = R.id.save;
      TextView save = ViewBindings.findChildViewById(rootView, id);
      if (save == null) {
        break missingId;
      }

      id = R.id.swipeBgLl;
      LinearLayout swipeBgLl = ViewBindings.findChildViewById(rootView, id);
      if (swipeBgLl == null) {
        break missingId;
      }

      id = R.id.swipeEt;
      EditText swipeEt = ViewBindings.findChildViewById(rootView, id);
      if (swipeEt == null) {
        break missingId;
      }

      return new ActivityMultiModeSettingBinding((RelativeLayout) rootView, back, detailsOne,
          detailsTwo, down, header, intervalBgLl, intervalEt, intervalType, mTv, msTv, popupRl,
          reset, sTv, save, swipeBgLl, swipeEt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
