// Generated by view binder compiler. Do not edit!
package com.smartclick.auto.tap.autoclicker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.smartclick.auto.tap.autoclicker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ExitScreenBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout nativeLay;

  @NonNull
  public final TextView txt1;

  @NonNull
  public final ImageView txtNo;

  @NonNull
  public final ImageView txtRate;

  @NonNull
  public final ImageView txtYes;

  private ExitScreenBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout nativeLay,
      @NonNull TextView txt1, @NonNull ImageView txtNo, @NonNull ImageView txtRate,
      @NonNull ImageView txtYes) {
    this.rootView = rootView;
    this.nativeLay = nativeLay;
    this.txt1 = txt1;
    this.txtNo = txtNo;
    this.txtRate = txtRate;
    this.txtYes = txtYes;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ExitScreenBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ExitScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.exit_screen, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ExitScreenBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.nativeLay;
      LinearLayout nativeLay = ViewBindings.findChildViewById(rootView, id);
      if (nativeLay == null) {
        break missingId;
      }

      id = R.id.txt1;
      TextView txt1 = ViewBindings.findChildViewById(rootView, id);
      if (txt1 == null) {
        break missingId;
      }

      id = R.id.txt_no;
      ImageView txtNo = ViewBindings.findChildViewById(rootView, id);
      if (txtNo == null) {
        break missingId;
      }

      id = R.id.txt_rate;
      ImageView txtRate = ViewBindings.findChildViewById(rootView, id);
      if (txtRate == null) {
        break missingId;
      }

      id = R.id.txt_yes;
      ImageView txtYes = ViewBindings.findChildViewById(rootView, id);
      if (txtYes == null) {
        break missingId;
      }

      return new ExitScreenBinding((LinearLayout) rootView, nativeLay, txt1, txtNo, txtRate,
          txtYes);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
